/*!
 * Copyright 2016 Pentaho Corporation.  All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

define(["dojo/_base/declare", 'common-ui/util/GUIDHelper', 'common-ui/underscore'],
  function(declare, GUIDHelper, _) {

    function throwAbstractClassError() {
      throw new TypeError("Abstract class");
    }

    return declare(null, {

      promptGUIDHelper: undefined,
      guid: undefined,
      destinationId: undefined,
      autoSubmit: undefined,

      constructor: function(destinationId) {
        this.promptGUIDHelper = new GUIDHelper();
        this.guid = this.promptGUIDHelper.generateGUID();
        this.destinationId = destinationId;
      },

      /**
       * Generate a unique GUID for a widget of this panel.
       *
       * @name PromptPanel#generateWidgetGUID
       * @method
       * @returns {String} The join of the guid of the prompt with a new one generated by the GUIDHelper
       */
      generateWidgetGUID: function() {
        return this.guid + '-' + this.promptGUIDHelper.generateGUID();
      },

      getAutoSubmit: function() {
        return this.autoSubmit;
      },

      setAutoSubmit: function(autoSubmit) {
        this.autoSubmit = autoSubmit;
      },

      getParameterName: function(parameter) {
        if (typeof parameter === 'string') {
          return this.guid + parameter;
        }
        return this.guid + parameter.name;
      },

      initializeParameterValue: function(param) {
        var value = param.getSelectedValuesValue();
        if (value.length === 0) {
          value = '';
        } else if (value.length === 1) {
          value = value[0];
        }
        this.setParameterValue(param, value);
      },

      /**
       * Compares the parameter value to its stored value
       * @name areParamsDifferent
       * @method
       * @param {String|Date|Number} paramValue The stored parameter value
       * @param {String|Date|Number} paramSelectedValue The value of the selected parameter
       * @param {String} paramType The parameter type
       * @returns {bool} The result of comparison
       */
      areParamsDifferent: function(paramValue, paramSelectedValue, paramType) {
        if (paramValue && paramSelectedValue) {
          switch (paramType) {
            case "java.lang.String": // Used upper case to eliminate UPPER() post-process formula influence on the strings comparison
              return paramValue.toUpperCase() != paramSelectedValue.toUpperCase();
            case "java.sql.Date": // Set time to zero to eliminate its influence on the days comparison
              return (new Date(paramValue).setHours(0, 0, 0, 0)) != (new Date(paramSelectedValue).setHours(0, 0, 0, 0));
            default:
              if (paramType.indexOf("[") == 0) { // Need to compare arrays
                if (paramValue.length != paramSelectedValue.length)
                  return true;
                return !_.isEqual(paramValue.sort(), paramSelectedValue.sort());
              }
              return paramValue != paramSelectedValue;
          }
        }
        return paramValue != paramSelectedValue;
      },

      getParameterValue: function(param) {
        throwAbstractClassError();
      },

      setParameterValue: function(param, value) {
        throwAbstractClassError();
      },

      createPromptPanel: function(paramDefn) {
        throwAbstractClassError();
      },

      updatePromptPanel: function(paramDefn, diff, isForceRefresh) {
        throwAbstractClassError();
      },

      showProgressIndicator: function() {
        throwAbstractClassError();
      },

      hideProgressIndicator: function() {
        throwAbstractClassError();
      },

      setBlockUiOptions: function(options) {
        throwAbstractClassError();
      },

      registerOnReady: function(callback) {
        throwAbstractClassError();
      },

      registerOnSubmit: function(callback) {
        throwAbstractClassError();
      },

      registerOnParameterChanged: function(callback) {
        throwAbstractClassError();
      },

      registerOnPostInit: function(callback) {
        throwAbstractClassError();
      }
    });
  });